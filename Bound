async getvalidBoundingBox(selector: string): Promise<{
  adjustedX1: number;
  adjustedY1: number;
  adjustedX2: number;
  adjustedY2: number;
  centerX: number;
  centerY: number;
} | null> {
  const boundingBox = await this.getBoundingBox(selector);
  if (!this.isValidBoundingBox(boundingBox)) {
    return null;
  }

  const { top, left, bottom, right } = boundingBox;
  const centerX = (left + right) / 2;
  const centerY = (top + bottom) / 2;

  // Clamp within bounding box
  const x1 = Math.max(left, centerX);
  const y1 = Math.max(top, centerY);
  const x2 = Math.min(right, centerX);
  const y2 = Math.min(bottom, centerY);

  // Adjust relative to the viewport container
  const vpLocator = this.locator(selector).last();
  const vpBox = await vpLocator.boundingBox();

  return {
    adjustedX1: x1 - vpBox.x,
    adjustedY1: y1 - vpBox.y,
    adjustedX2: x2 - vpBox.x,
    adjustedY2: y2 - vpBox.y,
    centerX,
    centerY
  };
}










const drawActions = {
  ellipse: gvstep.gv.gvGraphicalObject.drawEllipse.bind(gvstep.gv.gvGraphicalObject),
  arrow: gvstep.gv.gvGraphicalObject.drawArrow.bind(gvstep.gv.gvGraphicalObject),
  rectangle: gvstep.gv.gvGraphicalObject.drawRectangle.bind(gvstep.gv.gvGraphicalObject),
  polyline: async (vp, start, end) => {
    const mid1 = { x: start.x + 10, y: start.y + 10 };
    const mid2 = { x: end.x - 10, y: end.y - 10 };
    await gvstep.gv.gvGraphicalObject.drawPolyline(vp, [start, mid1, mid2, end]);
  },
  distance: gvstep.gv.gvGraphicalObject.drawDistance.bind(gvstep.gv.gvGraphicalObject)
};

for (let i = 0; i < tools.length; i++) {
  const box = await gvstep.gv.gvCommon.getViewportBoundingBox(GV_VIEWPORT_OBJECT.viewport01, i);
  if (!box) continue;

  const start = { x: box.adjustedX1, y: box.adjustedY1 };
  const end = { x: box.adjustedX2, y: box.adjustedY2 };
  const tool = tools[i];

  await drawActions[tool](GV_VIEWPORT_OBJECT.viewport01, start, end);
}

Test Cases for /api/v1/config/system API
1. GET /api/v1/config/system
This endpoint retrieves all system configurations for namespaces "NGV" and "Global" from CCS.

Positive Test Cases
Test Case	Input	Expected Output
Retrieve all configurations	Send a GET request without parameters	200 OK with an array of JSON objects
Retrieve configurations for a valid namespace (NGV)	GET request with ?namespace=NGV	200 OK with configurations for NGV
Retrieve configurations for a valid namespace (Global)	GET request with ?namespace=Global	200 OK with configurations for Global
Retrieve empty configurations	GET request for a namespace with no data	200 OK with an empty array
Negative Test Cases
Test Case	Input	Expected Output
Invalid namespace parameter	GET request with ?namespace=InvalidNS	400 Bad Request
Unauthorized access	GET request without authentication	401 Unauthorized
Invalid API endpoint	GET request to /api/v1/config/sys	404 Not Found
2. POST /api/v1/config/system
This endpoint saves system-level configurations to CCS. The request body contains an array of JSON objects.

Positive Test Cases
Test Case	Input	Expected Output
Save a valid system configuration	JSON body with "key": "config1", "value": "value1", "type": "STRING"	201 Created
Save multiple configurations in a batch	JSON array with multiple valid objects	201 Created with all configs saved
Negative Test Cases
Test Case	Input	Expected Output
Missing required fields	JSON body missing "key", "value", or "type"	400 Bad Request
Invalid data type	"type": "INTEGER" instead of "STRING"	400 Bad Request
Duplicate keys (if not allowed)	"key": "existing_key"	409 Conflict
Exceeding payload size	Large JSON payload	413 Payload Too Large
Unauthorized request	POST request without authentication	401 Unauthorized
Invalid JSON format	Malformed JSON body	400 Bad Request
Playwright API Test Script (TypeScript)
Now, I'll generate a detailed Playwright API test script using test() and test.step() for better readability.

typescript
Copy
Edit
import { test, expect } from '@playwright/test';

const BASE_URL = 'https://your-api-url.com/api/v1/config/system';

test.describe('API Tests for Config System', () => {

  // GET: Retrieve all system configurations
  test('Retrieve all system configurations', async ({ request }) => {
    await test.step('Send GET request to fetch all configurations', async () => {
      const response = await request.get(BASE_URL);
      expect(response.status()).toBe(200);

      const body = await response.json();
      await test.step('Verify response is an array', async () => {
        expect(Array.isArray(body)).toBeTruthy();
      });
    });
  });

  // GET: Retrieve configurations for a specific namespace
  test('Retrieve configurations for namespace NGV', async ({ request }) => {
    await test.step('Send GET request with namespace NGV', async () => {
      const response = await request.get(`${BASE_URL}?namespace=NGV`);
      expect(response.status()).toBe(200);

      const body = await response.json();
      await test.step('Verify response contains configurations', async () => {
        expect(Array.isArray(body)).toBeTruthy();
      });
    });
  });

  // GET: Invalid namespace should return 400
  test('Invalid namespace should return 400', async ({ request }) => {
    await test.step('Send GET request with an invalid namespace', async () => {
      const response = await request.get(`${BASE_URL}?namespace=INVALID_NAMESPACE`);
      expect(response.status()).toBe(400);
    });
  });

  // POST: Save a valid configuration
  test('Save a valid system configuration', async ({ request }) => {
    await test.step('Send POST request with valid configuration data', async () => {
      const response = await request.post(BASE_URL, {
        data: {
          key: "sample_config",
          value: "test_value",
          type: "STRING"
        }
      });
      expect(response.status()).toBe(201);
    });
  });

  // POST: Save configuration with missing key should return 400
  test('Save configuration with missing key should return 400', async ({ request }) => {
    await test.step('Send POST request without key field', async () => {
      const response = await request.post(BASE_URL, {
        data: {
          value: "test_value",
          type: "STRING"
        }
      });
      expect(response.status()).toBe(400);
    });
  });

  // POST: Save configuration with invalid type
  test('Save configuration with invalid type should return 400', async ({ request }) => {
    await test.step('Send POST request with invalid type INTEGER', async () => {
      const response = await request.post(BASE_URL, {
        data: {
          key: "invalid_config",
          value: "123",
          type: "INTEGER"
        }
      });
      expect(response.status()).toBe(400);
    });
  });

  // POST: Save duplicate configuration key (if not allowed)
  test('Save duplicate configuration key should return 409', async ({ request }) => {
    await test.step('Create a configuration with a specific key', async () => {
      await request.post(BASE_URL, {
        data: {
          key: "duplicate_config",
          value: "value1",
          type: "STRING"
        }
      });
    });

    await test.step('Attempt to create the same key again', async () => {
      const response = await request.post(BASE_URL, {
        data: {
          key: "duplicate_config",
          value: "value2",
          type: "STRING"
        }
      });
      expect(response.status()).toBe(409);
    });
  });

  // POST: Invalid JSON format
  test('Invalid JSON format should return 400', async ({ request }) => {
    await test.step('Send POST request with malformed JSON', async () => {
      const response = await request.post(BASE_URL, {
        headers: { 'Content-Type': 'application/json' },
        body: '{"key": "broken_config", "value": "test_value", "type": STRING}' // Missing quotes around STRING
      });
      expect(response.status()).toBe(400);
    });
  });

});
How to Run the Tests
Install Playwright and dependencies:
sh
Copy
Edit
npm init -y
npm install -D @playwright/test
Save the test script in a file:
sh
Copy
Edit
mkdir tests
touch tests/apiConfigSystem.spec.ts
Run the tests:
sh
Copy
Edit
npx playwright test
Final Thoughts
This script follows best practices using test.step() for structured debugging.
It covers both positive and negative test cases.
If authentication is needed, we can add token handling.
If you need environment variables for API URLs, we can set up .env files.

Verify that the API retrieves all the system configurations correctly by checking that the response status is 200.
Verify that the API retrieves configurations for the "NGV" namespace correctly by checking that the response contains configurations and the status is 200.
Verify that the API returns a 400 Bad Request status when an invalid namespace is provided in the request.
Verify that the API saves a valid system configuration correctly by checking that the response status is 201 Created.
Verify that the API returns a 400 Bad Request status when a POST request is made with a missing "key" field in the request body.
Verify that the API returns a 400 Bad Request status when a POST request contains an invalid type (e.g., "INTEGER" instead of "STRING").
Verify that the API returns a 409 Conflict status when attempting to save a duplicate configuration key.
Verify that the API returns a 400 Bad Request status when a POST request contains invalid JSON formatting.


import { test, expect, request } from '@playwright/test';

const BASE_URL = 'https://api.example.com/system-config'; // Replace with your API endpoint

// Helper function to create a request context
const createRequestContext = async () => {
  return await request.newContext();
};

test.describe('System Configuration API Tests', () => {
  let context;

  test.beforeAll(async () => {
    context = await createRequestContext();
  });

  test.afterAll(async () => {
    await context.dispose();
  });

  test('Verify that the API retrieves all system configurations correctly', async () => {
    const response = await context.get(`${BASE_URL}/configurations`);
    expect(response.status()).toBe(200);
    const body = await response.json();
    expect(body).toBeDefined();
  });

  test('Verify retrieval of configurations for "NGV" namespace', async () => {
    const response = await context.get(`${BASE_URL}/configurations?namespace=NGV`);
    expect(response.status()).toBe(200);
    const body = await response.json();
    expect(body.configurations).toBeDefined();
  });

  test('Verify API returns 400 for invalid namespace', async () => {
    const response = await context.get(`${BASE_URL}/configurations?namespace=INVALID_NAMESPACE`);
    expect(response.status()).toBe(400);
  });

  test('Verify saving a valid system configuration', async () => {
    const response = await context.post(`${BASE_URL}/configurations`, {
      data: {
        namespace: 'NGV',
        key: 'newConfig',
        value: 'TestValue',
        type: 'STRING'
      }
    });
    expect(response.status()).toBe(201);
  });

  test('Verify 400 Bad Request when POST request is missing "key" field', async () => {
    const response = await context.post(`${BASE_URL}/configurations`, {
      data: {
        namespace: 'NGV',
        value: 'TestValue',
        type: 'STRING'
      }
    });
    expect(response.status()).toBe(400);
  });

  test('Verify 400 Bad Request when POST request contains an invalid type', async () => {
    const response = await context.post(`${BASE_URL}/configurations`, {
      data: {
        namespace: 'NGV',
        key: 'invalidTypeConfig',
        value: '123',
        type: 'INTEGER' // Invalid type
      }
    });
    expect(response.status()).toBe(400);
  });

  test('Verify 409 Conflict when attempting to save a duplicate configuration key', async () => {
    const response = await context.post(`${BASE_URL}/configurations`, {
      data: {
        namespace: 'NGV',
        key: 'duplicateKey',
        value: 'TestValue',
        type: 'STRING'
      }
    });
    expect(response.status()).toBe(201);

    const duplicateResponse = await context.post(`${BASE_URL}/configurations`, {
      data: {
        namespace: 'NGV',
        key: 'duplicateKey',
        value: 'TestValue',
        type: 'STRING'
      }
    });
    expect(duplicateResponse.status()).toBe(409);
  });

  test('Verify 400 Bad Request when POST request contains invalid JSON', async () => {
    const response = await context.post(`${BASE_URL}/configurations`, {
      headers: { 'Content-Type': 'application/json' },
      body: '{ invalidJson: true, }' // Malformed JSON
    });
    expect(response.status()).toBe(400);
  });
});

async getViewportBoundingBox(
  selector: string,
  toolIndex: number = 0,
  toolCount: number = 1,
  myXValue?: number,
  myYValue?: number
): Promise<{
  adjustedX1: number;
  adjustedY1: number;
  adjustedX2: number;
  adjustedY2: number;
  centerX: number;
  centerY: number;
} | null> {
  const boundingBox = await this.getBoundingBox(selector);
  if (!this.isValidBoundingBox(boundingBox)) {
    return null;
  }

  const { top, left, bottom, right } = boundingBox!;
  const centerX = (left + right) / 2;
  const centerY = (top + bottom) / 2;

  const vpLocator = this.locator(selector).last();
  const vpBox = await vpLocator.boundingBox();
  if (!vpBox) {
    return null;
  }

  let x1: number, y1: number, x2: number, y2: number;

  if (myXValue !== undefined && myYValue !== undefined) {
    // --- Percentage Mode ---
    const percentX = vpBox.x + (myXValue / 100) * vpBox.width;
    const percentY = vpBox.y + (myYValue / 100) * vpBox.height;

    x1 = percentX;
    y1 = percentY;
    x2 = percentX + 40;
    y2 = percentY + 40;
  } else {
    // --- Slot Mode ---
    const totalHeight = bottom - top;
    const slotHeight = totalHeight / toolCount;
    const slotTop = top + toolIndex * slotHeight;
    const slotBottom = slotTop + slotHeight;

    const slotWidth = 40;
    x1 = centerX - slotWidth / 2;
    x2 = centerX + slotWidth / 2;
    y1 = slotTop + 5;
    y2 = slotBottom - 5;

    // Adjust slot relative to viewport
    x1 -= vpBox.x;
    y1 -= vpBox.y;
    x2 -= vpBox.x;
    y2 -= vpBox.y;
  }

  return {
    adjustedX1: x1,
    adjustedY1: y1,
    adjustedX2: x2,
    adjustedY2: y2,
    centerX,
    centerY
  };
}

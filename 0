async getViewportBoundingBox(
  selector: string,
  toolIndex: number = 0,
  toolCount: number = 1,
  myXValue?: number,
  myYValue?: number
): Promise<{
  adjustedX1: number;
  adjustedY1: number;
  adjustedX2: number;
  adjustedY2: number;
  centerX: number;
  centerY: number;
} | null> {
  const vpLocator = this.locator(selector).last();
  const vpBox = await vpLocator.boundingBox();
  if (!vpBox) return null;

  const top = vpBox.y;
  const bottom = vpBox.y + vpBox.height;
  const left = vpBox.x;
  const right = vpBox.x + vpBox.width;

  const centerX = (left + right) / 2;
  const centerY = (top + bottom) / 2;

  // Percentage logic with slots
  if (myXValue !== undefined && myYValue !== undefined) {
    const totalHeight = bottom - top;
    const slotHeight = totalHeight / toolCount;
    const slotTop = top + toolIndex * slotHeight;

    const percentCoords = await this.getPercentageBasedCoordinates(
      selector,
      myXValue,
      myYValue,
      slotTop,
      slotHeight
    );
    if (!percentCoords) return null;

    return {
      adjustedX1: percentCoords.adjustedX1 - vpBox.x,
      adjustedY1: percentCoords.adjustedY1 - vpBox.y,
      adjustedX2: percentCoords.adjustedX1 + 40 - vpBox.x,
      adjustedY2: percentCoords.adjustedY1 + 40 - vpBox.y,
      centerX,
      centerY
    };
  }

  // Pure slot logic
  const slotHeight = (bottom - top) / toolCount;
  const slotTop = top + toolIndex * slotHeight;
  const slotBottom = slotTop + slotHeight;

  const slotWidth = 40;
  const x1 = centerX - slotWidth / 2;
  const x2 = centerX + slotWidth / 2;
  const y1 = slotTop + 5;
  const y2 = slotBottom - 5;

  return {
    adjustedX1: x1 - vpBox.x,
    adjustedY1: y1 - vpBox.y,
    adjustedX2: x2 - vpBox.x,
    adjustedY2: y2 - vpBox.y,
    centerX,
    centerY
  };
}

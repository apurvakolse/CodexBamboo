private async getSlotBasedCoordinates(
  selector: string,
  toolIndex: number,
  toolCount: number
): Promise<{
  adjustedX1: number;
  adjustedY1: number;
  adjustedX2: number;
  adjustedY2: number;
  centerX: number;
  centerY: number;
} | null> {
  const vpLocator = this.locator(selector).last();
  const vpBox = await vpLocator.boundingBox();
  if (!vpBox) return null;

  const top = vpBox.y;
  const bottom = vpBox.y + vpBox.height;
  const left = vpBox.x;
  const right = vpBox.x + vpBox.width;

  const centerX = (left + right) / 2;
  const centerY = (top + bottom) / 2;

  const slotHeight = (bottom - top) / toolCount;
  const slotTop = top + toolIndex * slotHeight;
  const slotBottom = slotTop + slotHeight;

  const slotWidth = 40;
  const x1 = centerX - slotWidth / 2;
  const x2 = centerX + slotWidth / 2;
  const y1 = slotTop + 5;
  const y2 = slotBottom - 5;

  return {
    adjustedX1: x1 - vpBox.x,
    adjustedY1: y1 - vpBox.y,
    adjustedX2: x2 - vpBox.x,
    adjustedY2: y2 - vpBox.y,
    centerX,
    centerY
  };
}





async verifyAllToolsDrawn(selector: string, tools: string[], myXValue?: number, myYValue?: number) {
  const coordinates = [];
  
  for (let i = 0; i < tools.length; i++) {
    let coords;
    if (myXValue !== undefined && myYValue !== undefined) {
      // Get percentage-based coordinates with slot info
      coords = await this.getPercentageBasedCoordinates(
        selector, myXValue, myYValue, i * (100 / tools.length), 100 / tools.length
      );
    } else {
      // Get slot-based coordinates
      coords = await this.getSlotBasedCoordinates(selector, i, tools.length);
    }
    if (coords) {
      coordinates.push(coords);
    }
  }

  // Now use the coordinates to get the final bounding boxes
  const finalBoundingBoxes = coordinates.map(coord =>
    this.getViewportBoundingBox(selector, coord)
  );

  // Verify each tool's drawing status
  for (let i = 0; i < tools.length; i++) {
    const tool = tools[i];
    const boundingBox = finalBoundingBoxes[i];
    // Implement logic to verify if each tool is drawn correctly using `boundingBox`
  }
}










private getViewportBoundingBox(
  selector: string,
  coords: {
    adjustedX1: number;
    adjustedY1: number;
    adjustedX2: number;
    adjustedY2: number;
    x: number;
    y: number;
    width: number;
    height: number;
  }
): {
  adjustedX1: number;
  adjustedY1: number;
  adjustedX2: number;
  adjustedY2: number;
  centerX: number;
  centerY: number;
} {
  return {
    adjustedX1: coords.adjustedX1 - coords.x,
    adjustedY1: coords.adjustedY1 - coords.y,
    adjustedX2: coords.adjustedX2 - coords.x,
    adjustedY2: coords.adjustedY2 - coords.y,
    centerX: (coords.x + coords.width) / 2,
    centerY: (coords.y + coords.height) / 2
  };
}


